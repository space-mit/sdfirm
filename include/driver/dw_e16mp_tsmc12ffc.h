/*
 * ZETALOG's Personal COPYRIGHT
 *
 * Copyright (c) 2021
 *    ZETALOG - "Lv ZHENG".  All rights reserved.
 *    Author: Lv "Zetalog" Zheng
 *    Internet: zhenglv@hotmail.com
 *
 * This COPYRIGHT used to protect Personal Intelligence Rights.
 * Redistribution and use in source and binary forms with or without
 * modification, are permitted provided that the following conditions are
 * met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    This product includes software developed by the Lv "Zetalog" ZHENG.
 * 3. Neither the name of this software nor the names of its developers may
 *    be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 * 4. Permission of redistribution and/or reuse of souce code partially only
 *    granted to the developer(s) in the companies ZETALOG worked.
 * 5. Any modification of this software should be published to ZETALOG unless
 *    the above copyright notice is no longer declaimed.
 *
 * THIS SOFTWARE IS PROVIDED BY THE ZETALOG AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE ZETALOG OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * @(#)dw_e16mp_tsmc12ffc.h: Synopsys 16G PHY TSMC12FFC interface
 * $Id: dw_e16mp_tsmc12ffc.h,v 1.0 2021-12-17 16:00:00 zhenglv Exp $
 */

#ifndef __DW_E16MP_TSMC12FFC_H_INCLUDE__
#define __DW_E16MP_TSMC12FFC_H_INCLUDE__

#include <target/arch.h>

#ifndef DW_E16MP_BASE
#define DW_E16MP_BASE(n)		(DW_E16MP##n##_BASE)
#endif
#ifndef DW_E16MP_REG
#define DW_E16MP_REG(n, offset)		(DW_E16MP_BASE(n) + ((offset) << 1))
#endif
#ifndef NR_DW_E16MPS
#define NR_DW_E16MPS		1
#endif

#define SUP_DIG_IDCODE_LO(n)			DW_E16MP_REG(n, 0x0000)
#define SUP_DIG_IDCODE_HI(n)			DW_E16MP_REG(n, 0x0001)
#define SUP_DIG_REFCLK_OVRD_IN(n)		DW_E16MP_REG(n, 0x0002)
#define SUP_DIG_MPLLA_B_DIV_CLK_OVRD_IN(n)	DW_E16MP_REG(n, 0x0003)
#define SUP_DIG_MPLLA_OVRD_IN_0(n)		DW_E16MP_REG(n, 0x0004)
#define SUP_DIG_MPLLA_OVRD_IN_1(n)		DW_E16MP_REG(n, 0x0004)
#define SUP_DIG_MPLLA_OVRD_IN_2(n)		DW_E16MP_REG(n, 0x0004)
#define SUP_DIG_MPLLA_OVRD_IN_3(n)		DW_E16MP_REG(n, 0x0004)
#define SUP_DIG_MPLLA_OVRD_IN_4(n)		DW_E16MP_REG(n, 0x0004)
#define SUP_DIG_MPLLB_OVRD_IN_1(n)		DW_E16MP_REG(n, 0x0009)
#define SUP_DIG_MPLLB_OVRD_IN_2(n)		DW_E16MP_REG(n, 0x000A)
#define SUP_DIG_MPLLB_OVRD_IN_3(n)		DW_E16MP_REG(n, 0x000B)
#define SUP_DIG_MPLLB_OVRD_IN_4(n)		DW_E16MP_REG(n, 0x000C)
#define SUP_DIG_MPLLB_OVRD_IN_0(n)		DW_E16MP_REG(n, 0x000D)
#define SUP_DIG_SUP_OVRD_IN_0(n)		DW_E16MP_REG(n, 0x000E)
#define SUP_DIG_SUP_OVRD_IN_1(n)		DW_E16MP_REG(n, 0x000F)
#define SUP_DIG_SUP_OVRD_IN_2(n)		DW_E16MP_REG(n, 0x0010)
#define SUP_DIG_SUP_OVRD_OUT(n)			DW_E16MP_REG(n, 0x0011)
#define SUP_DIG_LVL_OVRD_IN(n)			DW_E16MP_REG(n, 0x0012)
#define SUP_DIG_DEBUG(n)			DW_E16MP_REG(n, 0x0013)
#define SUP_DIG_MPLLA_ASIC_IN_0(n)		DW_E16MP_REG(n, 0x0014)
#define SUP_DIG_MPLLA_ASIC_IN_1(n)		DW_E16MP_REG(n, 0x0015)
#define SUP_DIG_MPLLA_ASIC_IN_2(n)		DW_E16MP_REG(n, 0x0016)
#define SUP_DIG_MPLLB_ASIC_IN_0(n)		DW_E16MP_REG(n, 0x0017)
#define SUP_DIG_MPLLB_ASIC_IN_1(n)		DW_E16MP_REG(n, 0x0018)
#define SUP_DIG_MPLLB_ASIC_IN_2(n)		DW_E16MP_REG(n, 0x0019)
#define SUP_DIG_MPLLA_B_DIV_CLK_ASIC_IN(n)	DW_E16MP_REG(n, 0x001A)
#define SUP_DIG_ASIC_IN(n)			DW_E16MP_REG(n, 0x001B)
#define SUP_DIG_LVL_ASIC_IN(n)			DW_E16MP_REG(n, 0x001C)
#define SUP_DIG_SUP_OVRD_MISC(n)		DW_E16MP_REG(n, 0x001D)
#define SUP_DIG_MPLLA_FREQ_CNT_INIT_ASIC_IN(n)	DW_E16MP_REG(n, 0x001E)
#define SUP_DIG_MPLLB_FREQ_CNT_INIT_ASIC_IN(n)	DW_E16MP_REG(n, 0x001F)
#define SUP_DIG_MPLLA_MPLL_PWR_CTL_CAL_CTRL(n)	DW_E16MP_REG(n, 0x0020)
#define SUP_DIG_MPLLA_MPLL_PWR_CTL_MPLL_OVRD(n)	DW_E16MP_REG(n, 0x0021)
#define SUP_DIG_MPLLA_MPLL_PWR_CTL_STAT(n)	DW_E16MP_REG(n, 0x0022)
#define SUP_DIG_MPLLA_MPLL_PWR_CTL_MPLL_MISC_TIME_THRESHOLD(n)		\
	DW_E16MP_REG(n, 0x0023)
#define SUP_DIG_MPLLA_MPLL_PWR_CTL_PCLK_EN_AND_VCO_CLK_STABILIZATION_TIME_THRESHOLD(n)		\
	DW_E16MP_REG(n, 0x0024)
#define SUP_DIG_MPLLA_MPLL_PWR_CTL_PCLK_DIS_AND_MPLL_VCO_PWRDN_THRESH(n)\
	DW_E16MP_REG(n, 0x0025)
#define SUP_DIG_MPLLA_MPLL_PWR_CTL_MPLL_ANA_PWRUP_TIME_THRESH(n)	\
	DW_E16MP_REG(n, 0x0026)
#define SUP_DIG_MPLLA_MPLL_PWR_CTL_MPLL_FBCLK_EN_AND_MPLL_FBDIGCLK_DIS_TIME_THRESHOLD(n)	\
	DW_E16MP_REG(n, 0x0027)
#define SUP_DIG_MPLLA_MPLL_PWR_CTL_MPLL_COARSE_TUNE_VAL(n)		\
	DW_E16MP_REG(n, 0x0028)
#define SUP_DIG_MPLLA_MPLL_PWR_CTL_MPLL_SKIPCAL_COARSE_TUNE(n)		\
	DW_E16MP_REG(n, 0x0029)
#define SUP_DIG_MPLLA_SSC_SS_PHASE(n)		DW_E16MP_REG(n, 0x002A)
#define SUP_DIG_MPLLA_SSC_SS_FREQ_0(n)		DW_E16MP_REG(n, 0x002B)
#define SUP_DIG_MPLLA_SSC_SS_FREQ_1(n)		DW_E16MP_REG(n, 0x002C)
#define SUP_DIG_MPLLB_MPLL_PWR_CTL_CAL_CTRL(n)	DW_E16MP_REG(n, 0x002D)
#define SUP_DIG_MPLLB_MPLL_PWR_CTL_MPLL_OVRD(n)	DW_E16MP_REG(n, 0x002E)
#define SUP_DIG_MPLLB_MPLL_PWR_CTL_STAT(n)	DW_E16MP_REG(n, 0x002F)
#define SUP_DIG_MPLLB_MPLL_PWR_CTL_MPLL_MISC_TIME_THRESHOLD(n)		\
	DW_E16MP_REG(n, 0x0030)
#define SUP_DIG_MPLLB_MPLL_PWR_CTL_PCLK_EN_AND_VCO_CLK_STABILIZATION_TIME_THRESHOLD(n)		\
	DW_E16MP_REG(n, 0x0031)
#define SUP_DIG_MPLLB_MPLL_PWR_CTL_PCLK_DIS_AND_MPLL_VCO_PWRDN_THRESH(n)\
	DW_E16MP_REG(n, 0x0032)
#define SUP_DIG_MPLLB_MPLL_PWR_CTL_MPLL_ANA_PWRUP_TIME_THRESH(n)	\
	DW_E16MP_REG(n, 0x0033)
#define SUP_DIG_MPLLB_MPLL_PWR_CTL_MPLL_FBCLK_EN_AND_MPLL_FBDIGCLK_DIS_TIME_THRESHOLD(n)	\
	DW_E16MP_REG(n, 0x0034)
#define SUP_DIG_MPLLB_MPLL_PWR_CTL_MPLL_COARSE_TUNE_VAL(n)		\
	DW_E16MP_REG(n, 0x0035)
#define SUP_DIG_MPLLB_MPLL_PWR_CTL_MPLL_SKIPCAL_COARSE_TUNE(n)		\
	DW_E16MP_REG(n, 0x0036)
#define SUP_DIG_MPLLB_SSC_SS_PHASE(n)		DW_E16MP_REG(n, 0x0037)
#define SUP_DIG_MPLLB_SSC_SS_FREQ_0(n)		DW_E16MP_REG(n, 0x0038)
#define SUP_DIG_MPLLB_SSC_SS_FREQ_1(n)		DW_E16MP_REG(n, 0x0039)
#define SUP_DIG_CLK_RST_BG_PWRUP_TIME_0(n)	DW_E16MP_REG(n, 0x003A)
#define SUP_DIG_CLK_RST_BG_PWRUP_TIME_1(n)	DW_E16MP_REG(n, 0x003B)
#define SUP_ANA_MPLLA_LOOP_CTRL(n)		DW_E16MP_REG(n, 0x0040)
#define SUP_ANA_MPLLA_OVRD(n)			DW_E16MP_REG(n, 0x0041)
#define SUP_ANA_MPLLA_ATB1(n)			DW_E16MP_REG(n, 0x0042)
#define SUP_ANA_MPLLA_ATB2(n)			DW_E16MP_REG(n, 0x0043)
#define SUP_ANA_MPLLA_ATB3(n)			DW_E16MP_REG(n, 0x0044)
#define SUP_ANA_MPLLB_LOOP_CTRL(n)		DW_E16MP_REG(n, 0x0045)
#define SUP_ANA_MPLLB_OVRD(n)			DW_E16MP_REG(n, 0x0046)
#define SUP_ANA_MPLLB_ATB1(n)			DW_E16MP_REG(n, 0x0047)
#define SUP_ANA_MPLLB_ATB2(n)			DW_E16MP_REG(n, 0x0048)
#define SUP_ANA_MPLLB_ATB3(n)			DW_E16MP_REG(n, 0x0049)
#define SUP_ANA_RTUNE_CTRL(n)			DW_E16MP_REG(n, 0x004A)
#define SUP_ANA_SWITCH_PWR_MEAS(n)		DW_E16MP_REG(n, 0x004B)
#define SUP_ANA_SWITCH_MISC_MEAS(n)		DW_E16MP_REG(n, 0x004C)
#define SUP_ANA_BG(n)				DW_E16MP_REG(n, 0x004D)
#define SUP_DIG_RTUNE_DEBUG(n)			DW_E16MP_REG(n, 0x0060)
#define SUP_DIG_RTUNE_CONFIG(n)			DW_E16MP_REG(n, 0x0061)
#define SUP_DIG_RTUNE_STAT(n)			DW_E16MP_REG(n, 0x0062)
#define SUP_DIG_RTUNE_RX_SET_VAL(n)		DW_E16MP_REG(n, 0x0063)
#define SUP_DIG_RTUNE_TXDN_SET_VAL(n)		DW_E16MP_REG(n, 0x0064)
#define SUP_DIG_RTUNE_TXUP_SET_VAL(n)		DW_E16MP_REG(n, 0x0065)
#define SUP_DIG_RTUNE_RX_STAT(n)		DW_E16MP_REG(n, 0x0066)
#define SUP_DIG_RTUNE_TXDN_STAT(n)		DW_E16MP_REG(n, 0x0067)
#define SUP_DIG_RTUNE_TXUP_STAT(n)		DW_E16MP_REG(n, 0x0068)
#define SUP_DIG_ANA_MPLLA_OVRD_OUT(n)		DW_E16MP_REG(n, 0x0080)
#define SUP_DIG_ANA_MPLLB_OVRD_OUT(n)		DW_E16MP_REG(n, 0x0081)
#define SUP_DIG_ANA_RTUNE_OVRD_OUT(n)		DW_E16MP_REG(n, 0x0082)
#define SUP_DIG_ANA_RX_TERM_OVRD_OUT(n)		DW_E16MP_REG(n, 0x0083)
#define SUP_DIG_ANA_STAT(n)			DW_E16MP_REG(n, 0x0084)
#define SUP_DIG_ANA_BG_OVRD_OUT(n)		DW_E16MP_REG(n, 0x0085)
#define SUP_DIG_ANA_MPLLA_PMIX_OVRD_OUT(n)	DW_E16MP_REG(n, 0x0086)
#define SUP_DIG_ANA_MPLLB_PMIX_OVRD_OUT(n)	DW_E16MP_REG(n, 0x0087)
#define SUP_DIG_FREQ_CNT_PEAK_ASIC_IN(n)	DW_E16MP_REG(n, 0x00A0)
#define SUP_DIG_TXUP_TERM_OFFSET_ASIC_IN(n)	DW_E16MP_REG(n, 0x00A1)
#define SUP_DIG_TXDN_TERM_OFFSET_ASIC_IN(n)	DW_E16MP_REG(n, 0x00A2)
#define SUP_DIG_MISC_ASIC_IN(n)			DW_E16MP_REG(n, 0x00A3)

/* LANE registers */
#define DW_E16MP_LREG(n, l, offset)		\
	DW_E16MP_REG(n, (offset) + ((l) << 8))
#define DW_E16MP_ALL_LANE			0x80
#define LANE_DIG_ASIC_LANE_OVRD_IN(n, l)	DW_E16MP_LREG(n, l, 0x1000)
#define LANE_DIG_ASIC_TX_OVRD_IN_0(n, l)	DW_E16MP_LREG(n, l, 0x1001)
#define LANE_DIG_ASIC_TX_OVRD_IN_1(n, l)	DW_E16MP_LREG(n, l, 0x1002)
#define LANE_DIG_ASIC_TX_OVRD_IN_2(n, l)	DW_E16MP_LREG(n, l, 0x1003)
#define LANE_DIG_ASIC_TX_OVRD_OUT(n, l)		DW_E16MP_LREG(n, l, 0x1004)
#define LANE_DIG_ASIC_RX_OVRD_IN_0(n, l)	DW_E16MP_LREG(n, l, 0x1005)
#define LANE_DIG_ASIC_RX_OVRD_IN_1(n, l)	DW_E16MP_LREG(n, l, 0x1006)
#define LANE_DIG_ASIC_RX_OVRD_IN_2(n, l)	DW_E16MP_LREG(n, l, 0x1007)
#define LANE_DIG_ASIC_RX_OVRD_IN_3(n, l)	DW_E16MP_LREG(n, l, 0x1008)
#define LANE_DIG_ASIC_RX_OVRD_EQ_IN_0(n, l)	DW_E16MP_LREG(n, l, 0x1009)
#define LANE_DIG_ASIC_RX_OVRD_EQ_IN_1(n, l)	DW_E16MP_LREG(n, l, 0x100A)
#define LANE_DIG_ASIC_RX_OVRD_OUT_0(n, l)	DW_E16MP_LREG(n, l, 0x100B)
#define LANE_DIG_ASIC_LANE_ASIC_IN(n, l)	DW_E16MP_LREG(n, l, 0x100C)
#define LANE_DIG_ASIC_TX_ASIC_IN_0(n, l)	DW_E16MP_LREG(n, l, 0x100D)
#define LANE_DIG_ASIC_TX_ASIC_IN_1(n, l)	DW_E16MP_LREG(n, l, 0x100E)
#define LANE_DIG_ASIC_TX_ASIC_IN_2(n, l)	DW_E16MP_LREG(n, l, 0x100F)
#define LANE_DIG_ASIC_TX_ASIC_OUT(n, l)		DW_E16MP_LREG(n, l, 0x1010)
#define LANE_DIG_ASIC_RX_ASIC_IN_0(n, l)	DW_E16MP_LREG(n, l, 0x1011)
#define LANE_DIG_ASIC_RX_ASIC_IN_1(n, l)	DW_E16MP_LREG(n, l, 0x1012)
#define LANE_DIG_ASIC_RX_EQ_ASIC_IN_0(n, l)	DW_E16MP_LREG(n, l, 0x1013)
#define LANE_DIG_ASIC_RX_EQ_ASIC_IN_1(n, l)	DW_E16MP_LREG(n, l, 0x1014)
#define LANE_DIG_ASIC_RX_CDR_VCO_ASIC_IN_0(n, l)	\
	DW_E16MP_LREG(n, l, 0x1015)
#define LANE_DIG_ASIC_RX_CDR_VCO_ASIC_IN_1(n, l)	\
	DW_E16MP_LREG(n, l, 0x1016)
#define LANE_DIG_ASIC_RX_ASIC_OUT_0(n, l)	DW_E16MP_LREG(n, l, 0x1017)
#define LANE_DIG_ASIC_RX_OVRD_EQ_IN_2(n, l)	DW_E16MP_LREG(n, l, 0x1018)
#define LANE_DIG_ASIC_RX_OVRD_EQ_IN_3(n, l)	DW_E16MP_LREG(n, l, 0x1019)
#define LANE_DIG_ASIC_TX_OVRD_MISC(n, l)	DW_E16MP_LREG(n, l, 0x101A)
#define LANE_DIG_ASIC_RX_OVRD_MISC(n, l)	DW_E16MP_LREG(n, l, 0x101B)
#define LANE_DIG_TX_PWRCTL_TX_PSTATE_P0(n, l)	DW_E16MP_LREG(n, l, 0x1020)
#define LANE_DIG_TX_PWRCTL_TX_PSTATE_P0S(n, l)	DW_E16MP_LREG(n, l, 0x1021)
#define LANE_DIG_TX_PWRCTL_TX_PSTATE_P1(n, l)	DW_E16MP_LREG(n, l, 0x1022)
#define LANE_DIG_TX_PWRCTL_TX_PSTATE_P2(n, l)	DW_E16MP_LREG(n, l, 0x1023)
#define LANE_DIG_TX_PWRCTL_TX_PWRUP_TIME_0(n, l)	\
	DW_E16MP_LREG(n, l, 0x1024)
#define LANE_DIG_TX_PWRCTL_TX_PWRUP_TIME_1(n, l)	\
	DW_E16MP_LREG(n, l, 0x1025)
#define LANE_DIG_TX_PWRCTL_TX_PWRUP_TIME_2(n, l)	\
	DW_E16MP_LREG(n, l, 0x1026)
#define LANE_DIG_TX_PWRCTL_TX_PWRUP_TIME_3(n, l)	\
	DW_E16MP_LREG(n, l, 0x1027)
#define LANE_DIG_TX_PWRCTL_TX_PWRUP_TIME_4(n, l)	\
	DW_E16MP_LREG(n, l, 0x1028)
#define LANE_DIG_TX_PWRCTL_TX_FIFO_BYPASS(n, l)	DW_E16MP_LREG(n, l, 0x1029)
#define LANE_DIG_TX_PWRCTL_TX_PWRUP_TIME_5(n, l)	\
	DW_E16MP_LREG(n, l, 0x102A)
#define LANE_DIG_TX_LBERT_CTL(n, l)		DW_E16MP_LREG(n, l, 0x102B)
#define LANE_DIG_RX_PWRCTL_RX_PSTATE_P0(n, l)	DW_E16MP_LREG(n, l, 0x1040)
#define LANE_DIG_RX_PWRCTL_RX_PSTATE_P0S(n, l)	DW_E16MP_LREG(n, l, 0x1041)
#define LANE_DIG_RX_PWRCTL_RX_PSTATE_P1(n, l)	DW_E16MP_LREG(n, l, 0x1042)
#define LANE_DIG_RX_PWRCTL_RX_PSTATE_P2(n, l)	DW_E16MP_LREG(n, l, 0x1043)
#define LANE_DIG_RX_PWRCTL_RX_PWRUP_TIME_0(n, l)	\
	DW_E16MP_LREG(n, l, 0x1044)
#define LANE_DIG_RX_PWRCTL_RX_PWRUP_TIME_1(n, l)	\
	DW_E16MP_LREG(n, l, 0x1045)
#define LANE_DIG_RX_PWRCTL_RX_PWRUP_TIME_2(n, l)	\
	DW_E16MP_LREG(n, l, 0x1046)
#define LANE_DIG_RX_PWRCTL_RX_PWRUP_TIME_3(n, l)	\
	DW_E16MP_LREG(n, l, 0x1047)
#define LANE_DIG_RX_VCOCAL_RX_VCO_CAL_CTRL_0(n, l)	\
	DW_E16MP_LREG(n, l, 0x1048)
#define LANE_DIG_RX_VCOCAL_RX_VCO_CAL_CTRL_1(n, l)	\
	DW_E16MP_LREG(n, l, 0x1049)
#define LANE_DIG_RX_VCOCAL_RX_VCO_CAL_CTRL_2(n, l)	\
	DW_E16MP_LREG(n, l, 0x104A)
#define LANE_DIG_RX_VCOCAL_RX_VCO_CAL_TIME_0(n, l)	\
	DW_E16MP_LREG(n, l, 0x104B)
#define LANE_DIG_RX_VCOCAL_RX_VCO_CAL_TIME_1(n, l)	\
	DW_E16MP_LREG(n, l, 0x104C)
#define LANE_DIG_RX_VCOCAL_RX_VCO_STAT_0(n, l)	DW_E16MP_LREG(n, l, 0x104D)
#define LANE_DIG_RX_VCOCAL_RX_VCO_STAT_1(n, l)	DW_E16MP_LREG(n, l, 0x104E)
#define LANE_DIG_RX_VCOCAL_RX_VCO_STAT_2(n, l)	DW_E16MP_LREG(n, l, 0x104F)
#define LANE_DIG_RX_RX_ALIGN_XAUI_COMM_MASK(n, l)	\
	DW_E16MP_LREG(n, l, 0x1050)
#define LANE_DIG_RX_LBERT_CTL(n, l)		DW_E16MP_LREG(n, l, 0x1051)
#define LANE_DIG_RX_LBERT_ERR(n, l)		DW_E16MP_LREG(n, l, 0x1052)
#define LANE_DIG_RX_CDR_CDR_CTL_0(n, l)		DW_E16MP_LREG(n, l, 0x1053)
#define LANE_DIG_RX_CDR_CDR_CTL_1(n, l)		DW_E16MP_LREG(n, l, 0x1054)
#define LANE_DIG_RX_CDR_CDR_CTL_2(n, l)		DW_E16MP_LREG(n, l, 0x1055)
#define LANE_DIG_RX_CDR_CDR_CTL_3(n, l)		DW_E16MP_LREG(n, l, 0x1056)
#define LANE_DIG_RX_CDR_CDR_CTL_4(n, l)		DW_E16MP_LREG(n, l, 0x1057)
#define LANE_DIG_RX_CDR_STAT(n, l)		DW_E16MP_LREG(n, l, 0x1058)
#define LANE_DIG_RX_DPLL_FREQ(n, l)		DW_E16MP_LREG(n, l, 0x1059)
#define LANE_DIG_RX_DPLL_FREQ_BOUND_0(n, l)	DW_E16MP_LREG(n, l, 0x105A)
#define LANE_DIG_RX_DPLL_FREQ_BOUND_1(n, l)	DW_E16MP_LREG(n, l, 0x105B)
#define LANE_DIG_RX_ADPTCTL_ADPT_CFG_0(n, l)	DW_E16MP_LREG(n, l, 0x1060)
#define LANE_DIG_RX_ADPTCTL_ADPT_CFG_1(n, l)	DW_E16MP_LREG(n, l, 0x1061)
#define LANE_DIG_RX_ADPTCTL_ADPT_CFG_2(n, l)	DW_E16MP_LREG(n, l, 0x1062)
#define LANE_DIG_RX_ADPTCTL_ADPT_CFG_3(n, l)	DW_E16MP_LREG(n, l, 0x1063)
#define LANE_DIG_RX_ADPTCTL_ADPT_CFG_4(n, l)	DW_E16MP_LREG(n, l, 0x1064)
#define LANE_DIG_RX_ADPTCTL_ADPT_CFG_5(n, l)	DW_E16MP_LREG(n, l, 0x1065)
#define LANE_DIG_RX_ADPTCTL_ADPT_CFG_6(n, l)	DW_E16MP_LREG(n, l, 0x1066)
#define LANE_DIG_RX_ADPTCTL_ADPT_CFG_7(n, l)	DW_E16MP_LREG(n, l, 0x1067)
#define LANE_DIG_RX_ADPTCTL_ADPT_CFG_8(n, l)	DW_E16MP_LREG(n, l, 0x1068)
#define LANE_DIG_RX_ADPTCTL_ADPT_CFG_9(n, l)	DW_E16MP_LREG(n, l, 0x1069)
#define LANE_DIG_RX_ADPTCTL_RST_ADPT_CFG(n, l)	DW_E16MP_LREG(n, l, 0x106A)
#define LANE_DIG_RX_ADPTCTL_ATT_STATUS(n, l)	DW_E16MP_LREG(n, l, 0x106B)
#define LANE_DIG_RX_ADPTCTL_VGA_STATUS(n, l)	DW_E16MP_LREG(n, l, 0x106C)
#define LANE_DIG_RX_ADPTCTL_CTLE_STATUS(n, l)	DW_E16MP_LREG(n, l, 0x106D)
#define LANE_DIG_RX_ADPTCTL_DFE_TAP1_STATUS(n, l)	\
	DW_E16MP_LREG(n, l, 0x106E)
#define LANE_DIG_RX_ADPTCTL_DFE_TAP2_STATUS(n, l)	\
	DW_E16MP_LREG(n, l, 0x106F)

/* 11.2.28 SUP_DIG_ASIC_IN */
#define SUP_BG_EN				_BV(15)
#define SUP_MPLLB_STATE				_BV(14)
#define SUP_MPLLA_STATE				_BV(13)
#define SUP_RES_ACK_OUT				_BV(12)
#define SUP_RES_ACK_IN				_BV(11)
#define SUP_RES_REQ_OUT				_BV(10)
#define SUP_RES_REQ_IN				_BV(9)
#define SUP_RTUNE_ACK				_BV(8)
#define SUP_RTUNE_REQ				_BV(7)
#define SUP_TEST_POWERDOWN			_BV(6)
#define SUP_TEST_BURNIN				_BV(5)
#define SUP_REF_USE_PAD				_BV(4)
#define SUP_REF_REPEAT_CLK_EN			_BV(3)
#define SUP_REF_CLK_DIV2_EN			_BV(2)
#define SUP_REF_CLK_EN				_BV(1)
#define SUP_PHY_RESET				_BV(0)
/* 11.2.96 LANEN_DIG_ASIC_LANE_OVRD_IN */
#define LANE_OVRD_IN_EN				_BV(2)
#define LANE_OVRD_RX2TX_PAR_LB			_BV(1)
#define LANE_OVRD_TX2RX_SER_LB			_BV(0)
/* 11.2.97 LANEN_DIG_ASIC_TX_OVRD_IN_0 */
#define TX_OVRD_IN_0_EN			_BV(15)
#define TX_OVRD_DETECT_RX_REQ			_BV(14)
#define TX_OVRD_MPLLB_SEL			_BV(13)
#define TX_OVRD_WIDTH_OFFSET			11
#define TX_OVRD_WIDTH_MASK			REG_2BIT_MASK
#define TX_OVRD_WIDTH(value)			_SET_FV(TX_OVRD_WIDTH, value)
#define TX_OVRD_RATE_OFFSET			8
#define TX_OVRD_RATE_MASK			REG_3BIT_MASK
#define TX_OVRD_RATE(value)			_SET_FV(TX_OVRD_RATE, value)
#define TX_OVRD_PSTATE_OFFSET			6
#define TX_OVRD_PSTATE_MASK			REG_2BIT_MASK
#define TX_OVRD_PSTATE(value)			_SET_FV(TX_OVRD_PSTATE, value)
#define TX_OVRD_LPD				_BV(5)
#define TX_OVRD_REQ				_BV(4)
#define TX_OVRD_DATA_EN				_BV(3)
#define TX_OVRD_INVERT				_BV(2)
#define TX_OVRD_RESET				_BV(1)
#define TX_OVRD_CLK_RDY				_BV(0)
/* 11.2.98 LANEN_DIG_ASIC_TX_OVRD_IN_1 */
#define TX_OVRD_MAIN_OVRD_EN			_BV(15)
#define TX_OVRD_MAIN_CURSOR_OFFSET		9
#define TX_OVRD_MAIN_CURSOR_MASK		REG_6BIT_MASK
#define TX_OVRD_MAIN_CURSOR(value)		_SET_FV(TX_OVRD_MAIN_CURSOR, value)
#define TX_OVRD_IN_1_EN				_BV(8)
#define TX_OVRD_VBOOST_EN			_BV(7)
#define TX_OVRD_IBOOST_LVL_OFFSET		3
#define TX_OVRD_IBOOST_LVL_MASK			REG_4BIT_MASK
#define TX_OVRD_IBOOST_LVL(value)		_SET_FV(TX_OVRD_IBOOST_LVL, value)
#define TX_OVRD_BEACON_EN			_BV(2)
#define TX_OVRD_DISABLE				_BV(1)
#define TX_OVRD_NYQUIST_DATA			_BV(0)
/* 11.2.99 LANEN_DIG_ASIC_TX_OVRD_IN_2 */
#define TX_OVRD_POST_OVRD_EN			_BV(13)
#define TX_OVRD_POST_CURSOR_OFFSET		7
#define TX_OVRD_POST_CURSOR_MASK		REG_6BIT_MASK
#define TX_OVRD_POST_CURSOR(value)		_SET_FV(TX_OVRD_POST_CURSOR, value)
#define TX_OVRD_PRE_OVRD_EN			_BV(6)
#define TX_OVRD_PRE_CURSOR_OFFSET		0
#define TX_OVRD_PRE_CURSOR_MASK			REG_6BIT_MASK
#define TX_OVRD_PRE_CURSOR(value)		_SET_FV(TX_OVRD_PRE_CURSOR, value)
/* 11.2.100 LANEN_DIG_ASIC_TX_OVRD_OUT */
#define TX_OVRD_EN_DETRX_RESULT			_BV(3)
#define TX_OVRD_DETRX_RESULT			_BV(2)
#define TX_OVRD_EN_TX_ACK			_BV(1)
#define TX_OVRD_ACK				_BV(0)
/* 11.2.101 LANEN_DIG_ASIC_RX_OVRD_IN_0 */
#define RX_OVRD_IN_0_EN				_BV(13)
#define RX_OVRD_DFE_BYPASS			_BV(12)
#define RX_OVRD_DIV16P5_CLK_EN			_BV(11)
#define RX_OVRD_WIDTH_OFFSET			9
#define RX_OVRD_WIDTH_MASK			REG_2BIT_MASK
#define RX_OVRD_WIDTH(value)			_SET_FV(RX_OVRD_WIDTH, value)
#define RX_OVRD_RATE_OFFSET			7
#define RX_OVRD_RATE_MASK			REG_2BIT_MASK
#define RX_OVRD_RATE(value)			_SET_FV(RX_OVRD_RATE, value)
#define RX_OVRD_PSTATE_OFFSET			5
#define RX_OVRD_PSTATE_MASK			REG_2BIT_MASK
#define RX_OVRD_PSTATE(value)			_SET_FV(RX_OVRD_PSTATE, value)
#define RX_OVRD_LPD				_BV(4)
#define RX_OVRD_REQ				_BV(3)
#define RX_OVRD_DATA_EN				_BV(2)
#define RX_OVRD_INVERT				_BV(1)
#define RX_OVRD_RESET				_BV(0)
/* 11.2.102 LANEN_DIG_ASIC_RX_OVRD_IN_1 */
#define RX_OVRD_CDR_VCO_STEP_CTRL		_BV(11)
#define RX_OVRD_CDR_VCO_TEMP_COMP_EN		_BV(10)
#define RX_OVRD_IN_1_EN				_BV(9)
#define RX_OVRD_CDR_VCO_FREQBAND_1_0_OFFSET	7
#define RX_OVRD_CDR_VCO_FREQBAND_1_0_MASK	REG_2BIT_MASK
#define RX_OVRD_CDR_VCO_FREQBAND_1_0(value)	_SET_FV(RX_OVRD_CDR_VCO_FREQBAND_1_0, value)
#define RX_OVRD_REF_LD_VAL_OFFSET		0
#define RX_OVRD_REF_LD_VAL_MASK			REG_7BIT_MASK
#define RX_OVRD_REF_LD_VAL(value)		_SET_FV(RX_OVRD_REF_LD_VAL, value)
/* 11.2.103 LANEN_DIG_ASIC_RX_OVRD_IN_2 */
#define RX_OVRD_IN_2_EN				_BV(13)
#define RX_OVRD_VCO_LD_VAL_OFFSET		0
#define RX_OVRD_VCO_LD_VAL_MASK			REG_13BIT_MASK
#define RX_OVRD_VCO_LD_VAL(value)		_SET_FV(RX_OVRD_VCO_LD_VAL, value)
/* 11.2.104 LANEN_DIG_ASIC_RX_OVRD_IN_3 */
#define RX_OVRD_IN_3_EN				_BV(11)
#define RX_OVRD_TERM_ACDC			_BV(10)
#define RX_OVRD_TERM_EN				_BV(9)
#define RX_OVRD_LOS_LPFS_EN			_BV(8)
#define RX_OVRD_LOS_THRSHLD_OFFSET		5
#define RX_OVRD_LOS_THRSHLD_MASK		REG_3BIT_MASK
#define RX_OVRD_LOS_THRSHLD(value)		_SET_FV(RX_OVRD_LOS_THRSHLD, value)
#define RX_OVRD_DISABLE				_BV(4)
#define RX_OVRD_CLK_SHIFT			_BV(3)
#define RX_OVRD_ALIGN_EN			_BV(2)
#define RX_OVRD_CDR_SSC_EN			_BV(1)
#define RX_OVRD_CDR_TRACK_EN			_BV(0)
/* 11.2.105 LANEN_DIG_ASIC_RX_OVRD_EQ_IN_0 */
#define RX_OVRD_EQ_CTLE_BOOST_OFFSET		9
#define RX_OVRD_EQ_CTLE_BOOST_MASK		REG_5BIT_MASK
#define RX_OVRD_EQ_CTLE_BOOST(value)		_SET_FV(RX_OVRD_EQ_CTLE_BOOST, value)
#define RX_OVRD_EQ_VGA2_GAIN_OFFSET		6
#define RX_OVRD_EQ_VGA2_GAIN_MASK		REG_3BIT_MASK
#define RX_OVRD_EQ_VGA2_GAIN(value)		_SET_FV(RX_OVRD_EQ_VGA2_GAIN, value)
#define RX_OVRD_EQ_VGA1_GAIN_OFFSET		3
#define RX_OVRD_EQ_VGA1_GAIN_MASK		REG_3BIT_MASK
#define RX_OVRD_EQ_VGA1_GAIN(value)		_SET_FV(RX_OVRD_EQ_VGA1_GAIN, value)
#define RX_OVRD_EQ_ATT_LVL_OFFSET		0
#define RX_OVRD_EQ_ATT_LVL_MASK			REG_3BIT_MASK
#define RX_OVRD_EQ_ATT_LVL(value)		_SET_FV(RX_OVRD_EQ_ATT_LVL, value)
/* 11.2.106 LANEN_DIG_ASIC_RX_OVRD_EQ_IN_1 */
#define RX_OVRD_EQ_OVRD_EN			_BV(10)
#define RX_OVRD_EQ_DFE_TAP1_OFFSET		2
#define RX_OVRD_EQ_DFE_TAP1_MASK		REG_8BIT_MASK
#define RX_OVRD_EQ_DFE_TAP1(value)		_SET_FV(RX_OVRD_EQ_DFE_TAP1, value)
#define RX_OVRD_EQ_CTLE_POLE_OFFSET		0
#define RX_OVRD_EQ_CTLE_POLE_MASK		REG_2BIT_MASK
#define RX_OVRD_EQ_CTLE_POLE(value)		_SET_FV(RX_OVRD_EQ_CTLE_POLE, value)
/* 11.2.107 LANEN_DIG_ASIC_RX_OVRD_OUT_0 */
#define RX_OVRD_EN_CTL				_BV(4)
#define RX_OVRD_ADAPT_STS_OFFSET		2
#define RX_OVRD_ADAPT_STS_MASK			REG_2BIT_MASK
#define RX_OVRD_ADAPT_STS(value)		_SET_FV(RX_OVRD_ADAPT_STS, value)
#define RX_OVRD_LOS				_BV(1)
#define RX_OVRD_ACK				_BV(0)
/* 11.2.108 LANEN_DIG_ASIC_LANE_ASIC_IN */
#define LANE_ASIC_LANE_RX2TX_PAR_LB		_BV(1)
#define LANE_ASIC_LANE_TX2RX_SER_LB		_BV(0)
/* 11.2.109 LANEN_DIG_ASIC_TX_ASIC_IN_0 */
#define TX_ASIC_DISABLE				_BV(15)
#define TX_ASIC_DETECT_RX_REQ			_BV(14)
#define TX_ASIC_MPLLB_SEL			_BV(13)
#define TX_ASIC_WIDTH_OFFSET			11
#define TX_ASIC_WIDTH_MASK			REG_2BIT_MASK
#define TX_ASIC_WIDTH(value)			_GET_FV(TX_ASIC_WIDTH, value)
#define TX_ASIC_RATE_OFFSET			8
#define TX_ASIC_RATE_MASK			REG_3BIT_MASK
#define TX_ASIC_RATE(value)			_GET_FV(TX_ASIC_RATE, value)
#define TX_ASIC_PSTATE_OFFSET			6
#define TX_ASIC_PSTATE_MASK			REG_2BIT_MASK
#define TX_ASIC_PSTATE(value)			_GET_FV(TX_ASIC_PSTATE, value)
#define TX_ASIC_LPD				_BV(5)
#define TX_ASIC_REQ				_BV(4)
#define TX_ASIC_DATA_EN				_BV(3)
#define TX_ASIC_INVERT				_BV(2)
#define TX_ASIC_RESET				_BV(1)
#define TX_ASIC_CLK_RDY				_BV(0)
/* 11.2.110 LANEN_DIG_ASIC_TX_ASIC_IN_1 */
#define TX_ASIC_MAIN_CURSOR_OFFSET		6
#define TX_ASIC_MAIN_CURSOR_MASK		REG_6BIT_MASK
#define TX_ASIC_MAIN_CURSOR(value)		_GET_FV(TX_ASIC_MAIN_CURSOR, value)
#define TX_ASIC_VBOOST_EN			_BV(5)
#define TX_ASIC_IBOOST_LVL_OFFSET		1
#define TX_ASIC_IBOOST_LVL_MASK			REG_4BIT_MASK
#define TX_ASIC_IBOOST_LVL(value)		_GET_FV(TX_ASIC_IBOOST_LVL, value)
#define TX_ASIC_BEACON_EN			_BV(0)
/* 11.2.111 LANEN_DIG_ASIC_TX_ASIC_IN_2 */
#define TX_ASIC_POST_CURSOR_OFFSET		6
#define TX_ASIC_POST_CURSOR_MASK		REG_6BIT_MASK
#define TX_ASIC_POST_CURSOR(value)		_GET_FV(TX_ASIC_POST_CURSOR, value)
#define TX_ASIC_PRE_CURSOR_OFFSET		0
#define TX_ASIC_PRE_CURSOR_MASK			REG_6BIT_MASK
#define TX_ASIC_PRE_CURSOR(value)		_GET_FV(TX_ASIC_PRE_CURSOR, value)
/* 11.2.112 LANEN_DIG_ASIC_TX_ASIC_OUT */
#define TX_ASIC_DETRX_RESULT			_BV(1)
#define TX_ASIC_ACK				_BV(0)
/* 11.2.113 LANEN_DIG_ASIC_RX_ASIC_IN_0 */
#define RX_ASIC_CDR_TRACK_EN			_BV(13)
#define RX_ASIC_RX_DFE_BYPASS			_BV(12)
#define RX_ASIC_DIV16P5_CLK_EN			_BV(11)
#define RX_ASIC_WIDTH_OFFSET			9
#define RX_ASIC_WIDTH_MASK			REG_2BIT_MASK
#define RX_ASIC_WIDTH(value)			_GET_FV(RX_ASIC_WIDTH, value)
#define RX_ASIC_RATE_OFFSET			7
#define RX_ASIC_RATE_MASK			REG_2BIT_MASK
#define RX_ASIC_RATE(value)			_GET_FV(RX_ASIC_RATE, value)
#define RX_ASIC_PSTATE_OFFSET			5
#define RX_ASIC_PSTATE_MASK			REG_2BIT_MASK
#define RX_ASIC_PSTATE(value)			_GET_FV(RX_ASIC_PSTATE, value)
#define RX_ASIC_LPD				_BV(4)
#define RX_ASIC_REQ				_BV(3)
#define RX_ASIC_DATA_EN				_BV(2)
#define RX_ASIC_INVERT				_BV(1)
#define RX_ASIC_RESET				_BV(0)
/* 11.2.114 LANEN_DIG_ASIC_RX_ASIC_IN_1 */
#define RX_ASIC_RX_TERM_ACDC			_BV(9)
#define RX_ASIC_RX_TERM_EN			_BV(8)
#define RX_ASIC_LOS_LPFS_EN			_BV(7)
#define RX_ASIC_LOS_THRSHLD_OFFSET		4
#define RX_ASIC_LOS_THRSHLD_MASK		REG_3BIT_MASK
#define RX_ASIC_LOS_THRSHLD(value)		_GET_FV(RX_ASIC_LOS_THRSHLD, value)
#define RX_ASIC_DISABLE				_BV(3)
#define RX_ASIC_CLK_SHIFT			_BV(2)
#define RX_ASIC_ALIGN_EN			_BV(1)
#define RX_ASIC_CDR_SSC_EN			_BV(0)
/* 11.2.115 LANEN_DIG_ASIC_RX_EQ_ASIC_IN_0 */
#define RX_ASIC_EQ_CTLE_BOOST_OFFSET		9
#define RX_ASIC_EQ_CTLE_BOOST_MASK		REG_5BIT_MASK
#define RX_ASIC_EQ_CTLE_BOOST(value)		_GET_FV(RX_ASIC_EQ_CTLE_BOOST, value)
#define RX_ASIC_EQ_VGA2_GAIN_OFFSET		6
#define RX_ASIC_EQ_VGA2_GAIN_MASK		REG_3BIT_MASK
#define RX_ASIC_EQ_VGA2_GAIN(value)		_GET_FV(RX_ASIC_EQ_VGA2_GAIN, value)
#define RX_ASIC_EQ_VGA1_GAIN_OFFSET		3
#define RX_ASIC_EQ_VGA1_GAIN_MASK		REG_3BIT_MASK
#define RX_ASIC_EQ_VGA1_GAIN(value)		_GET_FV(RX_ASIC_EQ_VGA1_GAIN, value)
#define RX_ASIC_EQ_ATT_LVL_OFFSET		0
#define RX_ASIc_EQ_ATT_LVL_MASK			REG_3BIT_MASK
#define RX_ASIc_EQ_ATT_LVL(value)		_GET_FV(RX_ASIC_EQ_ATT_LVL, value)
/* 11.2.116 LANEN_DIG_ASIC_RX_EQ_ASIC_IN_1 */
#define RX_ASIC_EQ_DFE_TAP1_OFFSET		2
#define RX_ASIC_EQ_DFE_TAP1_MASK		REG_8BIT_MASK
#define RX_ASIC_EQ_DFE_TAP1(value)		_GET_FV(RX_ASIC_EQ_DFE_TAP1, value)
#define RX_ASIC_EQ_CTLE_POLE_OFFSET		0
#define RX_ASIC_EQ_CTLE_POLE_MASK		REG_2BIT_MASK
#define RX_ASIC_EQ_CTLE_POLE(value)		_GET_FV(RX_ASIC_EQ_CTLE_POLE, value)
/* 11.2.117 LANEN_DIG_ASIC_RX_CDR_VCO_ASIC_IN_0 */
#define RX_ASIC_REF_LD_VAL_OFFSET		4
#define RX_ASIC_REF_LD_VAL_MASK			REG_7BIT_MASK
#define RX_ASIC_REF_LD_VAL(value)		_GET_FV(RX_ASIC_REF_LD_VAL, value)
#define RX_ASIC_CDR_VCO_FREQBAND_OFFSET		2
#define RX_ASIC_CDR_VCO_FREQBAND_MASK		REG_2BIT_MASK
#define RX_ASIC_CDR_VCO_FREQBAND(value)		_GET_FV(RX_ASIC_CDR_VCO_FREQBAND, value)
#define RX_ASIC_CDR_VCO_STEP_CTRL		_BV(1)
#define RX_ASIC_CDR_VCO_TEMP_COMP_EN		_BV(0)
/* 11.2.118 LANEN_DIG_ASIC_RX_CDR_VCO_ASIC_IN_1 */
#define RX_ASIC_VCO_LD_VAL_OFFSET		0
#define RX_ASIC_VCO_LD_VAL_MASK			REG_13BIT_MASK
#define RX_ASIC_VCO_LD_VAL(value)		_GET_FV(RX_ASIC_VCO_LD_VAL, value)
/* 11.2.119 LANEN_DIG_ASIC_RX_ASIC_ASIC_OUT_0 */
#define RX_ASIC_ADAPT_STS_OFFSET		3
#define RX_ASIC_ADAPT_STS_MASK			REG_2BIT_MASK
#define RX_ASIC_ADAPT_STS(value)		_GET_FV(RX_ASIC_ADAPT_STS, value)
#define RX_ASIC_VALID				_BV(2)
#define RX_ASIC_LOS				_BV(1)
#define RX_ASIC_ACK				_BV(0)
/* 11.2.120 LANEN_DIG_ASIC_RX_OVRD_EQ_IN_2 */
#define RX_OVRD_EQ_DFE_TAP3_OFFSET		7
#define RX_OVRD_EQ_DFE_TAP3_MASK		REG_7BIT_MASK
#define RX_OVRD_EQ_DFE_TAP3(value)		_SET_FV(RX_OVRD_EQ_DFE_TAP3, value)
#define RX_OVRD_EQ_DFE_TAP2_OFFSET		0
#define RX_OVRD_EQ_DFE_TAP2_MASK		REG_7BIT_MASK
#define RX_OVRD_EQ_DFE_TAP2(value)		_SET_FV(RX_OVRD_EQ_DFE_TAP2, value)
/* 11.2.121 LANEN_DIG_ASIC_RX_OVRD_EQ_IN_3 */
#define RX_OVRD_EQ_DFE_TAP5_OFFSET		7
#define RX_OVRD_EQ_DFE_TAP5_MASK		REG_7BIT_MASK
#define RX_OVRD_EQ_DFE_TAP5(value)		_SET_FV(RX_OVRD_EQ_DFE_TAP5, value)
#define RX_OVRD_EQ_DFE_TAP4_OFFSET		0
#define RX_OVRD_EQ_DFE_TAP4_MASK		REG_7BIT_MASK
#define RX_OVRD_EQ_DFE_TAP4(value)		_SET_FV(RX_OVRD_EQ_DFE_TAP4, value)
/* 11.2.122 LANEN_DIG_ASIC_TX_OVRD_MISC */
#define TX_OVRD_MISC_OVRD_EN			_BV(8)
#define TX_OVRD_MISC_OVRD_VAL_OFFSET		0
#define TX_OVRD_MISC_OVRD_VAL_MASK		REG_8BIT_MASK
#define TX_OVRD_MISC_OVRD_VAL(value)		_SET_FV(TX_OVRD_MISC_OVRD_VAL, value)

/* RX/TX pstate */
#define LANE_P0					0x0
#define LANE_P0S				0x1
#define LANE_P1					0x2
#define LANE_P2					0x3

#define dw_e16mp_lane_get_rx_ack(n, l)				\
	(__raw_readw(LANE_DIG_ASIC_RX_ASIC_OUT_0(n, l)) & RX_ASIC_ACK)
#define dw_e16mp_lane_set_rx_ovrd_in_0(n, l)			\
	__raw_setw(RX_OVRD_IN_0_EN, LANE_DIG_ASIC_RX_OVRD_IN_0(n, l))
#define dw_e16mp_lane_set_rx_req(n, l)				\
	__raw_setw(RX_OVRD_REQ, LANE_DIG_ASIC_RX_OVRD_IN_0(n, l))
#define dw_e16mp_lane_clear_rx_req(n, l)			\
	__raw_clearw(RX_OVRD_REQ, LANE_DIG_ASIC_RX_OVRD_IN_0(n, l))
#define dw_e16mp_lane_set_rx_pstate(n, l, s)			\
	__raw_writew_mask(RX_OVRD_PSTATE(s),			\
			  RX_OVRD_PSTATE(RX_OVRD_PSTATE_MASK),	\
			  LANE_DIG_ASIC_RX_OVRD_IN_0(n, l))
#define dw_e16mp_lane_set_rx_data_en(n, l)			\
	__raw_setw(RX_OVRD_DATA_EN, LANE_DIG_ASIC_RX_OVRD_IN_0(n, l))

#define dw_e16mp_lane_get_tx_ack(n, l)				\
	(__raw_readw(LANE_DIG_ASIC_TX_ASIC_OUT(n, l)) & TX_ASIC_ACK)
#define dw_e16mp_lane_set_tx_ovrd_in_0(n, l)			\
	__raw_setw(TX_OVRD_IN_0_EN, LANE_DIG_ASIC_TX_OVRD_IN_0(n, l))
#define dw_e16mp_lane_set_tx_req(n, l)				\
	__raw_setw(TX_OVRD_REQ, LANE_DIG_ASIC_TX_OVRD_IN_0(n, l))
#define dw_e16mp_lane_clear_tx_req(n, l)			\
	__raw_setw(TX_OVRD_REQ, LANE_DIG_ASIC_TX_OVRD_IN_0(n, l))
#define dw_e16mp_lane_set_tx_pstate(n, l, s)			\
	__raw_writew_mask(TX_OVRD_PSTATE(s),			\
			  TX_OVRD_PSTATE(TX_OVRD_PSTATE_MASK),	\
			  LANE_DIG_ASIC_TX_OVRD_IN_0(n, l))
#define dw_e16mp_lane_set_tx_clk_rdy(n, l)			\
	__raw_setw(TX_OVRD_CLK_RDY, LANE_DIG_ASIC_TX_OVRD_IN_0(n, l))
#define dw_e16mp_lane_set_tx_data_en(n, l)			\
	__raw_setw(TX_OVRD_DATA_EN, LANE_DIG_ASIC_TX_OVRD_IN_0(n, l))

void dw_e16mp_tsmc12ffc_init(int n, int l);

#endif /* __DW_E16MP_TSMC12FFC_H_INCLUDE__ */
