#
# Firmware Tests
#

menu "Standard benchmark tests"

menuconfig DHRYSTONE
	bool "Dhrystone"
	select TIME_CLOCK

if DHRYSTONE

choice
	prompt "Dhrystone run rules"

config DHRYSTONE_GROUND_RULES
	bool "Ground rules"
	select DHRYSTONE_NO_INLINE
	help
	  - Seperate compilation;
	  - No procedure merging;
	  - Otherwise, compiler optimization are allowed but should be
	    indicated;
	  - default results are those without register declarations.

config DHRYSTONE_BEST_EFFORT
	bool "Best effort"
	select DHRYSTONE_REG
	select CC_OPT_SPEED

endchoice

config DHRYSTONE_REPEATS
	int "Dhyrstone number of runs"
	range 5000 5000000 if DHRYSTONE_TIME_CLOCK
	range 500 5000000 if DHRYSTONE_TIME_TSC
	default 5000

config DHRYSTONE_WARMUPS
	int "Dhrystone number of warmup runs"
	range 1 100
	default 1

config DHRYSTONE_TIME
	bool "Run dhrystone a specific time slot"

choice
	prompt "Time measure API"
	default DHRYSTONE_TIME_TSC

config DHRYSTONE_TIME_CLOCK
	bool "clock()"

config DHRYSTONE_TIME_TSC
	bool "tick()"

endchoice

config DHRYSTONE_TIMEOUT
	int "Dhrystone timeout (ticks or clocks)"
	depends DHRYSTONE_TIME
	range -1 1000000
	default -1

config DHRYSTONE_TSC_TOO_SMALL
	int "Too small ticks"
	depends DHRYSTONE_TIME_TSC
	default 2

config DHRYSTONE_REG
	bool "Use registers as dhrystone data"
	depends DHRYSTONE_BEST_EFFORT
	default y

config DHRYSTONE_NO_INLINE
	bool "Disallow inline function merging"
	depends DHRYSTONE_GROUND_RULES

choice
	prompt "Percpu mechanism"
	default DHRYSTONE_BENCH_PERCPU

config DHRYSTONE_BENCH_PERCPU
	bool "Bench percpu allocation"

config DHRYSTONE_GENERIC_PERCPU
	bool "SMP percpu variable"

config DHRYSTONE_SPECIFIC_PERCPU
	bool "Specific percpu arrary"

endchoice

endif

menuconfig LINPACK
	bool "Linpack"
	select FP
	select PRINT_SPRINTF

if LINPACK

config LINPACK_CALIBRATION_TIMEOUT
	int "Linpack calibration timeout (usecs)"
	range 1 1000000
	default 1

config LINPACK_CALIBRATION_REPEATS
	int "Linpack calibration repeats"
	range 1 10
	default 1

choice
	prompt "Percpu mechnism"
	default LINPACK_BENCH_PERCPU

config LINPACK_BENCH_PERCPU
	bool "Bench percpu allocation"

config LINPACK_GENERIC_PERCPU
	bool "SMP percpu allocation"

config LINPACK_SPECIFIC_PERCPU
	bool "Specific percpu array"

endchoice

endif

menuconfig COREMARK
	bool "CoreMark"
	select FP
	select PRINT_SPRINTF

if COREMARK

choice
	prompt "Run type"
	default COREMARK_RUN_PERFORMANCE

config COREMARK_RUN_PERFORMANCE
	bool "Performance"

config COREMARK_RUN_VALIDATION
	bool "Validation"

config COREMARK_RUN_PROFILE
	bool "Profile"

endchoice

choice
	prompt "Seed method"
	default COREMARK_SEED_VOLATILE

config COREMARK_SEED_VOLATILE
	bool "Volatile"

config COREMARK_SEED_ARG
	bool "Arguments"

config COREMARK_SEED_FUNC
	bool "Function"

endchoice

choice
	prompt "Memory method"
	default COREMARK_MEM_STATIC

config COREMARK_MEM_STATIC
	bool "Static"

config COREMARK_MEM_STACK
	bool "Stack"

config COREMARK_MEM_MALLOC
	bool "Malloc"
	depends HEAP

endchoice

choice
	prompt "Percpu mechanism"
	default COREMARK_STATIC_PERCPU

config COREMARK_STATIC_PERCPU
	bool "SMP percpu variable"

config COREMARK_STATIC_SPECIFIC
	bool "Specific percpu arrary"

endchoice

choice
	prompt "Time measure API"
	default COREMARK_TIME_TSC

config COREMARK_TIME_CLOCK
	bool "clock()"

config COREMARK_TIME_TSC
	bool "tick()"

endchoice

config COREMARK_ITERATIONS
	int "Iterations"
	default 0
	help
	  By default, the benchmark will run between 10-100 seconds. And
	  ITERATIONS is set to the 0. To override, use ITERATIONS=N

config COREMARK_TOTAL_DATA_SIZE
	int "Total size of data"
	default 2000 if !COREMARK_RUN_PROFILE
	default 1200 if COREMARK_RUN_PROFILE
	help
	  If not using malloc or command line arguments are not supported,
	  the buffer size for the algorithms must be defined via the
	  compiler define TOTAL_DATA_SIZE.  TOTAL_DATA_SIZE must be set to
	  2000 bytes (default) for standard runs.  The default for such a
	  target when testing different configurations could be...

config COREMARK_DEBUG
	bool "Enable debug run"

config COREMARK_PRINT_ARGS
	bool "Enable printing of CoreMark arguments"
	depends COREMARK_SEED_ARG

endif

menuconfig MEMSTREAM
	bool "Memory Stream"

if MEMSTREAM

config MEMSTREAM_STATIC_ARRAY
	bool "Use static array (rather than allocate dynamically)"
	default y

config MEMSTREAM_ARRAY_SIZE
	int "Array size"
	range 1000 8000000
	default 200000

config MEMSTREAM_NTIMES
	int "Running times"
	range 1 16
	default 2

config MEMSTREAM_TIME_ON
	bool "Turn on time operations"
	default n

endif

endmenu

source tests/bench/algo/Kconfig
source tests/bench/sanity/Kconfig
